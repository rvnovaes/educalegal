metadata:
  title: Contrato de Prestação de Serviços Educacionais
  date format: 'dd/MM/yyyy'
---
include:
  - element-tenant-school-interview.yml
  - element-features.yml
  - element-roadmap.yml
  - element-data-list.yml
  - element-signature.yml
  - element-generate-file.yml
  - element-educalegal-patch-document.yml
  - element-document-ready.yml
  - element-school-email-reviewed.yml
  - element-default-messages.yml
  - element-school-witness.yml
---
modules:
  - docassemble_wrappers.validator_collection_br
  - .module_docusign_client
---
sections:
  - Escola
  - Aluno(a)
  - Contratantes
  - Dados Contratuais
  - Assinatura
  - Conclusão
---
code:  |
  content_document = "colegio-evolucao-contrato-prestacao-servicos-educacionais.docx"
---
id: logic
mandatory: True
code: |
  if valid_data:
    menu_items
    if len(school_names_list) > 1:
      selected_school
    else:
      selected_school = school_names_list[0]
    school
    reviewed_school_email_answer
    students.target_number = 1
    for item in students:
      item.name.text
    students[0].grade
    contractors.gather()
    if plan_use_esignature:
      valid_contractors_table
    school_year
    if method_payment == "parcelado":
      installments_list
      if has_input_value:
        valid_input_installments_data_table
      valid_other_installments_data_table
    else:
      single_installment_date_format
    signature_local
    witnesses.uses_parts = False
    valid_witnesses_table
    generated_file
    el_patch_document
    document_ready_screen
---
objects:
  - students: DAList.using(object_type=Individual, complete_attribute='complete', ask_number=True)
---
code: |
  students[i].name.text
  students[i].complete = True
comment: |
  1. A ordem informada nesse bloco é a ordem que aparece na entrevista
  2. O complete = True deve ser a última instrução sempre
---
ga id: |
  code: ga_id_begin
section: Aluno
progress: 5
question: Número de Alunos
fields:
  - Número: students.target_number
    datatype: integer
    default: 1
    min: 1
---
progress: 10
section: Aluno(a)
question: Dados do(a) Aluno(a)
fields:
  - 'Nome completo: ': students[i].name.text
    datatype: text
  - 'Série: ': students[i].grade
    datatype: dropdown
    choices:
    - Berçário: Berçário
    - Maternal I: Maternal I
    - Maternal II: Maternal II
    - Maternal III: Maternal III
    - 1º período do ensino infantil: 1º período do ensino infantil
    - 2º período do ensino infantil: 2º período do ensino infantil
    - 1º ano do ensino fundamental: 1º ano do ensino fundamental
    - 2º ano do ensino fundamental: 2º ano do ensino fundamental
    - 3º ano do ensino fundamental: 3º ano do ensino fundamental
    - 4º ano do ensino fundamental: 4º ano do ensino fundamental
    - 5º ano do ensino fundamental: 5º ano do ensino fundamental
    - 6º ano do ensino fundamental: 6º ano do ensino fundamental
    - 7º ano do ensino fundamental: 7º ano do ensino fundamental
    - 8º ano do ensino fundamental: 8º ano do ensino fundamental
    - 9º ano do ensino fundamental: 9º ano do ensino fundamental
    - 1º ano do ensino médio: 1º ano do ensino médio
    - 2º ano do ensino médio: 2º ano do ensino médio
    - 3º ano do ensino médio: 3º ano do ensino médio
---
objects:
  - contractors: DAList.using(object_type=Individual, complete_attribute='complete', ask_number=True)
---
code: |
  contractors[i].name.text
  contractors[i].address.street_name
  contractors[i].complete = True
---
progress: 35
section: Contratantes
question: |
  Número de Contratantes
fields:
  - Número: contractors.target_number
    datatype: integer
    default: 1
    min: 1
---
progress: 50
section: Contratantes
question: Dados do(a) ${word(ordinal(i)) } Contratante
fields:
  - 'Nome completo: ': contractors[i].name.text
    validate: validate_person_full_name
    datatype: text
  - 'CPF: ': contractors[i].cpf
    datatype: text
    validate: validate_cpf
  - 'Número do RG: ': contractors[i].rg
    datatype: text
    required: False
  - 'Nacionalidade:': contractors[i].nationality
    datatype: text
    default: brasileiro(a)
  - 'Estado Civil: ': contractors[i].marital_status
    required: False
    choices:
      - solteiro(a): solteiro(a)
      - casado(a): casado(a)
      - divorciado(a): divorciado(a)
      - viúvo(a): viúvo(a)
    datatype: radio
  - 'Profissão: ': contractors[i].occupation
    datatype: text
    required: False
  - 'E-mail: ': contractors[i].email
    help: ${ help_email_msg }
    datatype: email
  - 'Telefone: ': contractors[i].phone_number
    datatype: text
  - 'Whatsapp:': contractors[i].whatsapp_number
    datatype: text
script: |
  <script type="text/javascript">
    $(document).ready(function(){
        $('#Y29udHJhY3RvcnNbaV0uY3Bm').mask('000.000.000-00', {reverse: true});
      });
  </script>
---
progress: 65
section: Contratantes
question: Endereço de ${ contractors[i].name.text }
fields:
  - 'CEP: ': contractors[i].address.zip
    datatype: text
  - 'Logradouro: ': contractors[i].address.street_name
    datatype: text
  - 'Número': contractors[i].address.street_number
    datatype: text
  - 'Complemento: ': contractors[i].address.unit
    datatype: text
    required: False
  - 'Bairro: ': contractors[i].address.neighborhood
    datatype: text
  - 'Município: ': contractors[i].address.city
    datatype: text
  - 'Estado: ': contractors[i].address.state
    code: state_initials_list
script: |
  <script type="text/javascript">
  $(document).ready(function(){
    $('#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy56aXA').mask('00000-000');
  });

  $("#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy56aXA").focusout(function(){
    var cep = $("#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy56aXA").val();
    cep = cep.replace ("-","");
    if (cep != ""){
      var urlStr = "https://viacep.com.br/ws/"+ cep +"/json/";
      $.ajax({
        url: urlStr,
        crossDomain: true,
        type: "get",
        dataType: "json",
        success: function(data){
          $("#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy5zdHJlZXRfbmFtZQ").val(data.logradouro);
          $("#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy5uZWlnaGJvcmhvb2Q").val(data.bairro);
          $("#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy5jaXR5").val(data.localidade);
          $("#Y29udHJhY3RvcnNbaV0uYWRkcmVzcy5zdGF0ZQ").val(data.uf);
        },
        error: function(erro){
          console.log(erro);
        }
      });
    }
  });
  </script>
---
section: Contratantes
field: valid_contractors_table
question: |
  Contratantes:
subquestion: |
  Confira os e-mails dos destinatários abaixo, pois estes serão usados
  no envio para a assinatura eletrônica.
  ${ contractors.table }
buttons:
  Continuar: continue
---
table: contractors.table
rows: contractors
columns:
  - Name: |
      row_item.name.text
  - E-mail: |
      row_item.email
edit:
  - email
---
progress: 70
section: Dados Contratuais
question: Ano Letivo
fields:
  - 'Ano Letivo: ': school_year
    datatype: integer
    default: |
      ${ school_year_default }
---
code: |
  recipients = list()
  for item in contractors:
      if item.email:
          new_recipient = dict()
          new_recipient['name'] = item.name.text
          new_recipient['email'] = item.email
          new_recipient['group'] = 'signers'
          new_recipient['routingOrder'] = 1
          new_recipient['tabs'] = [
              {
                  'type': 'signHere',
                  'anchorString': generate_anchor('signHere', item.email)
              },
          ]
          recipients.append(new_recipient)

  new_recipient = dict()
  new_recipient['name'] = school_legal_name
  new_recipient['email'] = school_email
  new_recipient['group'] = 'signers'
  new_recipient['routingOrder'] = 2
  new_recipient['tabs'] = [
      {
          'type': 'signHere',
          'anchorString': generate_anchor('signHere', school_email)
      },
  ]
  recipients.append(new_recipient)

  for item in witnesses:
      if item.email:
          new_recipient = dict()
          new_recipient['name'] = item.name.text
          new_recipient['email'] = item.email
          new_recipient['group'] = 'signers'
          new_recipient['routingOrder'] = 2
          new_recipient['tabs'] = [
              {
                  'type': 'signHere',
                  'anchorString': generate_anchor('signHere', item.email)
              },
          ]
          recipients.append(new_recipient)

  document_name = custom_file_name + '.pdf'
---
code: |
  from datetime import date
  school_year_default = date.today().year + 1
---
code: |
  from num2words import num2words
  annual_value_words = num2words(annual_value, lang='pt_BR', to='currency')
---
code: |
  from num2words import num2words
  if has_input_value:
    input_value_words = num2words(input_value, lang='pt_BR', to='currency')
    input_value_total = quantity_input_installments * input_value
    input_value_total_words  = num2words(input_value_total , lang='pt_BR', to='currency')
---
code: |
  from num2words import num2words
  if method_payment == "parcelado":
    installments_value_words = num2words(installments_value, lang='pt_BR', to='currency')
    net_installments_value_words = num2words(net_installments_value, lang='pt_BR', to='currency')
---
progress: 85
section: Dados Contratuais
question: Preço e Forma de Pagamento
fields:
  - 'Valor anual do contrato: ': annual_value
    datatype: currency
    hint: 0000,00
    help: "O valor deve ser informado sem o desconto concedido."
  - 'Informações sobre o desconto : ': discount_notes
    datatype: area
    hint: "exemplo: 10% ou 100 reais"
    help: Inserir informações do desconto a ser concedido sobre o valor anual de contrato.
  - 'Forma de pagamento:': method_payment
    datatype: radio
    choices:
      - à vista: à vista
      - parcelado: parcelado
  - note: |
      **DADOS DA PARCELA ÚNICA**
    js show if: |
      val("method_payment") == "à vista"
  - 'Data do vencimento da parcela única:': single_installment_date
    datatype: date
    js show if: |
      val("method_payment") == "à vista"
  - 'Há parcela de entrada:': has_input_value
    datatype: yesnoradio
    js show if: |
      val("method_payment") == "parcelado"
  - note: |
      **DADOS DA PARCELA DE ENTRADA**

      Após informar os dados abaixo, as parcelas serão geradas automaticamente e poderão ser revisadas na próxima tela.
    js show if: |
      val("has_input_value") == true
  - 'Quantidade de prestações da parcela de entrada: ': quantity_input_installments
    datatype: integer
    default: 1
    min: 1
    js show if: |
      val("has_input_value") == true
  - 'Valor da parcela': input_value
    datatype: currency
    hint: 0000,00
    js show if: |
      val("has_input_value") == true
  - 'Data do vencimento da primeira parcela': input_date
    datatype: date
    js show if: |
      val("has_input_value") == true
  - note: |
      ** DADOS DAS DEMAIS PARCELAS**

      Após informar os dados abaixo, as parcelas serão geradas automaticamente e poderão ser revisadas na próxima tela.
    js show if: |
      val("method_payment") == "parcelado" && val("has_input_value") == true
  - note: |
      **DADOS DAS PARCELAS**

      Após informar os dados abaixo, as parcelas serão geradas automaticamente e poderão ser revisadas na próxima tela.
    js show if: |
      val("method_payment") == "parcelado" && val("has_input_value") == false
  - 'Quantidade de parcelas: ': quantity_installments
    help: Quantidade de parcelas, excluindo a entrada, caso haja.
    datatype: integer
    default: 1
    min: 1
    max: 12
    js show if: |
      val("has_input_value") == true || val("has_input_value") == false
  - 'Valor da parcela:': installments_value
    datatype: currency
    hint: 0000,00
    js show if: |
      val("has_input_value") == true || val("has_input_value") == false
  - 'Data do vencimento da primeira parcela: ': installments_date
    datatype: date
    js show if: |
      val("has_input_value") == true || val("has_input_value") == false
  - 'Valor líquido da parcela:': net_installments_value
    datatype: currency
    required: False
    help: Valor da parcela com o desconto concedido.
    hint: 0000,00
    js show if: |
      val("has_input_value") == true || val("has_input_value") == false
script: |
  <script type="text/javascript">
    $(document).ready(function(){
        $('#YW5udWFsX3ZhbHVl').mask('000000000000000.00', {reverse: true});
        $('#X2ZpZWxkXzg').mask('000000000000000.00', {reverse: true});
        $('#X2ZpZWxkXzEz').mask('000000000000000.00', {reverse: true});
        $('#X2ZpZWxkXzE1').mask('000000000000000.00', {reverse: true});
        });
  </script>
---
code: |
    from datetime import datetime
    from dateutil.relativedelta import relativedelta

    if method_payment == 'parcelado':
      # converte data string para date (usado na importacao csv em lote ou json via api)
      if isinstance(installments_date, str):
          installments_date = datetime.strptime(installments_date, '%d/%m/%Y').date()

      # formata data em dia/mês/ano
      installments_date_format = format_date(installments_date, format='dd/MM/yyyy')

      if has_input_value:
        # converte data string para date (usado na importacao csv em lote ou json via api)
        if isinstance(input_date, str):
          input_date = datetime.strptime(input_date, '%d/%m/%Y').date()

        # formata data em dia/mês/ano
        input_date_format = format_date(input_date, format='dd/MM/yyyy')

        input_installments_list = list()
        installments_input_date_day = format_date(input_date, format='dd')
        for v in range(0, quantity_input_installments):
          installments = dict()
          installments_input_due = input_date + relativedelta(months=+v)
          installments_input_due = format_date(installments_input_due, format='dd/MM/yyyy')
          installments['installments_input_due'] = installments_input_due
          installments['installments_input_value'] = input_value
          input_installments_list.append(installments)

      installments_list = list()
      installments_date_day = format_date(installments_date, format='dd')
      for v in range(0, quantity_installments):
        installments = dict()
        installments_due = installments_date + relativedelta(months=+v)
        installments_due = format_date(installments_due, format='dd/MM/yyyy')
        installments['installments_due'] = installments_due
        installments['installments_value'] = installments_value
        installments_list.append(installments)
    else:
      single_installment_date_format = format_date(single_installment_date, format='dd/MM/yyyy')
---
code: |
  input_installments_data.target_number = quantity_input_installments
  for i, installments in enumerate(input_installments_list):
    # O objeto Thing tem como requerido o campo name
    input_installments_data[i].name.text = None
    input_installments_data[i].date = installments['installments_input_due']
    input_installments_data[i].value = installments['installments_input_value']
---
objects:
  - input_installments_data: DAList.using(object_type=Thing, ask_number=True)
---
question: |
  Dados da ${word(ordinal(i)) } parcela:
fields:
  - "Data de Vencimento :": input_installments_data[i].date
    datatype: date
  - "Valor :": input_installments_data[i].value
    datatype: currency
script: |
  <script type="text/javascript">
    $(document).ready(function(){
        $('#aW5wdXRfaW5zdGFsbG1lbnRzX2RhdGFbaV0udmFsdWU').mask('000000000000000.00', {reverse: true});
      });
  </script>
---
table: input_installments_data.table
rows: input_installments_data
columns:
  - "Nº Parcela": |
      row_index + 1
  - Data: |
      row_item.date
  - Valor: |
      row_item.value
edit:
  - date
  - value
delete buttons: False
---
field: valid_input_installments_data_table
progress: 95
question: |
  Dados da parcela de entrada:
subquestion: |
  ${ input_installments_data.table }
buttons:
  Continuar: continue
---
code: |
  other_installments_data.target_number = quantity_installments
  for i, installments in enumerate(installments_list):
    # O objeto Thing tem como requerido o campo name
    other_installments_data[i].name.text = None
    other_installments_data[i].date = installments['installments_due']
    other_installments_data[i].value = installments['installments_value']
---
objects:
  - other_installments_data: DAList.using(object_type=Thing, ask_number=True)
---
question: |
  Dados da ${word(ordinal(i)) } parcela:
fields:
  - "Data de Vencimento :": other_installments_data[i].date
    datatype: date
  - "Valor :": other_installments_data[i].value
    datatype: currency
---
table: other_installments_data.table
rows: other_installments_data
columns:
  - "Nº Parcela": |
      row_index + 2 if has_input_value else row_index + 1
  - Data: |
      row_item.date
  - Valor: |
      row_item.value
edit:
  - date
  - value
delete buttons: False
---
field: valid_other_installments_data_table
progress: 95
question: |
  % if has_input_value:
  Dados das demais parcelas:
  % else:
  Dados das parcelas:
  % endif
subquestion: |
  ${ other_installments_data.table }
buttons:
  Continuar: continue
