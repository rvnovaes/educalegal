---
metadata:
  title: Enviar documento para assinatura eletrônica
---
sections:
  - Minuta
  - Parte
  - Contraparte
  - Parte extra
  - Anexos
  - Conclusão
---
include:
  - element-tenant-school-interview.yml
  - element-features.yml
  - element-roadmap.yml
  - element-data-list.yml
  - element-signature.yml
  - element-school-email-reviewed.yml
  - element-default-messages.yml
  - element-school-witness.yml
---
modules:
  - docassemble_wrappers.validator_collection_br
  - .module_docusign_client
  - .module_normalize_ascii
  - .module_educalegal_client
---
id: logic
mandatory: True
code: |
  if valid_data:
    menu_items
    if len(school_names_list) > 1:
      selected_school
    else:
      selected_school = school_names_list[0]
    document_type_selected
    part_types.target_number = 1
    for item in part_types:
      item.name.text
    school_party_type
    reviewed_school_email_answer
    if school_party_type_selected == part_types[0].name.text:
      counterparts.target_number
      for item in counterparts:
        item.name.text
      if part_types[0].has_extraparts:
        for item in extraparts:
          item.name.text
    elif school_party_type_selected == part_types[0].counterpart_name:
      for item in parts:
        item.name.text
      if part_types[0].has_extraparts:
        for item in extraparts:
          item.name.text
    elif school_party_type_selected == part_types[0].extrapart_name:
      for item in parts:
        item.name.text
      for item in counterparts:
        item.name.text
#    if has_witnesses:
#      valid_witnesses_table
#    custom_file_name
#    if has_attachment:
#      uploaded_file
#      generated_file = pdf_concatenate(generic_document, uploaded_file)
#    else:
#      generated_file = generic_document
#    el_patch_document
#    document_ready_screen
---
section: Minuta
progress: 5
question: |
  Insira a minuta que deseja enviar para assinatura eletrônica.
fields:
  - "Tipo do documento:": document_type_selected
    datatype: dropdown
    code: |
      document_types_names_list
  - "Inserir minuta:": generic_document
    required: true
    datatype: files
---
objects:
  - part_types: DAList.using(object_type=Person, ask_number=True)
---
section: Parte
progress: 5
question: Parte
fields:
  - Número de Tipo de Pessoas: part_types.target_number
    required: true
    datatype: integer
    default: 1
    min: 1
---
progress: 5
section: Partes
question: Tipos de Partes do Documento
fields:
  - "Denominação da Parte:": part_types[i].name.text
    required: True
    help: "Ex: Contratante(s), Locador(es) "
  - "Denominação da Contraparte:": part_types[i].counterpart_name
    required: True
    help: "Ex: Contratada(s), Locatária(s)"
  - "Haverá parte extra (Ex: Fiador):": part_types[i].has_extraparts
    help: "Por exemplo, fiador"
    datatype: yesnoradio
  - "Denominação da Extra parte:": part_types[i].extrapart_name
    required: True
    default: "Fiador(es)"
    js show if: |
      val("part_types[i].has_extraparts")
---
code: |
  school_party_type_list = list()
  if part_types[0].has_extraparts:
    school_party_type_list.append(part_types[0].name.text)
    school_party_type_list.append(part_types[0].counterpart_name)
    school_party_type_list.append(part_types[0].extrapart_name)
  else:
    school_party_type_list.append(part_types[0].name.text)
    school_party_type_list.append(part_types[0].counterpart_name)
---
section: Escola
question: |
  A escola será a parte
fields:
  - "Tipo da parte:": school_party_type
    required: True
    datatype: dropdown
    code: |
      school_party_type_list
---
code: |
  # Atribuindo os dados da escola para o tipo de parte escolhido pelo usuário
  school_party_type_selected = school_party_type
  if school_party_type_selected == part_types[0].name.text:
    parts.target_number = 1
    parts[0].person_type = "organization"
    parts[0].name.text = school_legal_name
    parts[0].cnpj = school_cnpj
    parts[0].email = school_email
  elif school_party_type_selected == part_types[0].counterpart_name:
    counterparts.target_number = 1
    counterparts[0].person_type = "organization"
    counterparts[0].name.text = school_legal_name
    counterparts[0].cnpj = school_cnpj
    counterparts[0].email = school_email
  elif school_party_type_selected == part_types[0].extrapart_name:
    extraparts.target_number = 1
    extraparts[0].person_type = "organization"
    extraparts[0].name.text = school_legal_name
    extraparts[0].cnpj = school_cnpj
    extraparts[0].email = school_email
---
objects:
  - parts: DAList.using(object_type=Person, ask_number=True)
---
section: Parte
progress: 10
question: ${ part_types[0].name.text }
fields:
  - Número de Pessoas: parts.target_number
    required: true
    datatype: integer
    default: 1
    min: 1
---
section: Parte
progress: 20
question: |
  Dados do(a) ${word(ordinal(i)) } ${ part_types[0].name.text }
fields:
  - "Tipo:": parts[i].person_type
    datatype: radio
    choices:
      - Pessoa Física: individual
      - Pessoa Jurídica: organization
  - 'Nome/Razão social:': parts[i].name.text
    validate: validate_person_full_name
    help: 'Para pessoa jurídica informe o nome conforme consta no CNPJ. Para pessoa física, o nome completo.'
    js show if: |
      val("parts[i].person_type")
  - "E-mail:": parts[i].email
    datatype: email
    help: ${ help_email_msg }
    required: True
    js show if: |
       val("parts[i].person_type") != null
  - "CPF:": parts[i].cpf
    required: False
    validate: validate_cpf
    show if:
      variable: parts[i].person_type
      is: individual
  - "CNPJ:": parts[i].cnpj
    required: False
    validate: validate_cnpj
    show if:
      variable: parts[i].person_type
      is: organization
script: |
  <script type="text/javascript">
    $(document).ready(function(){
        $('#X2ZpZWxkXzM').mask('000.000.000-00', {reverse: true});
        $('#X2ZpZWxkXzQ').mask('00.000.000/0000-00', {reverse: true});
      });
  </script>
---
objects:
  - counterparts: DAList.using(object_type=Person, ask_number=True)
---
section: Contraparte
progress: 40
question: ${ part_types[0].counterpart_name }
fields:
  - Número de Pessoas: counterparts.target_number
    required: true
    datatype: integer
    default: 1
    min: 1
---
section: Contraparte
progress: 50
question: |
  Dados do(a) ${word(ordinal(i)) } ${ part_types[i].counterpart_name }
fields:
  - "Tipo:": counterparts[i].person_type
    datatype: radio
    choices:
      - Pessoa Física: individual
      - Pessoa Jurídica: organization
  - 'Nome/Razão social:': counterparts[i].name.text
    validate: validate_person_full_name
    help: 'Para pessoa jurídica informe o nome conforme consta no CNPJ. Para pessoa física, o nome completo.'
    js show if: |
      val("counterparts[i].person_type")
  - "E-mail:": counterparts[i].email
    datatype: email
    help: ${ help_email_msg }
    required: False
    js show if: |
       val("counterparts[i].person_type") != null
  - "CPF:": counterparts[i].cpf
    required: False
    validate: validate_cpf
    show if:
      variable: counterparts[i].person_type
      is: individual
  - "CNPJ:": counterparts[i].cnpj
    required: False
    validate: validate_cnpj
    show if:
      variable: counterparts[i].person_type
      is: organization
script: |
  <script type="text/javascript">
    $(document).ready(function(){
        $('#X2ZpZWxkXzM').mask('000.000.000-00', {reverse: true});
        $('#X2ZpZWxkXzQ').mask('00.000.000/0000-00', {reverse: true});
      });
  </script>
---
objects:
  - extraparts: DAList.using(object_type=Person, ask_number=True)
---
section: Parte Extra
progress: 70
question: ${ part_types[0].extrapart_name }
fields:
  - Número de Pessoas: extraparts.target_number
    required: true
    datatype: integer
    default: 1
    min: 1
---
section: Parte Extra
progress: 80
question: |
  Dados do(a) ${word(ordinal(i)) } ${ part_types[i].extrapart_name }
fields:
  - "Tipo:": extraparts[i].person_type
    datatype: radio
    choices:
      - Pessoa Física: individual
      - Pessoa Jurídica: organization
  - 'Nome/Razão social:': extraparts[i].name.text
    validate: validate_person_full_name
    help: 'Para pessoa jurídica informe o nome conforme consta no CNPJ. Para pessoa física, o nome completo.'
    js show if: |
      val("extraparts[i].person_type")
  - "E-mail:": extraparts[i].email
    datatype: email
    help: ${ help_email_msg }
    required: True
    js show if: |
       val("extraparts[i].person_type") != null
  - "CPF:": extraparts[i].cpf
    required: False
    validate: validate_cpf
    show if:
      variable: extraparts[i].person_type
      is: individual
  - "CNPJ:": extraparts[i].cnpj
    required: False
    validate: validate_cnpj
    show if:
      variable: extraparts[i].person_type
      is: organization
script: |
  <script type="text/javascript">
    $(document).ready(function(){
        $('#X2ZpZWxXzI').mask('000.000.000-00', {reverse: true});
        $('#X2ZpZWxkXzQ').mask('00.000.000/0000-00', {reverse: true});
      });
  </script>
---
section: Anexos
progress: 90
question: |
  Anexos:
fields:
  - 'Deseja inserir algum arquivo anexo? :': has_attachment
    datatype: yesnoradio
  - 'Anexo (Formatos válidos: PDF) :': uploaded_file
    accept: |
      "application/pdf"
    datatype: files
    show if:
      variable: has_attachment
      is: True
---
code: |
  # Definindo filename
  for document_type in document_types_names_list:
      if document_type_selected in document_type:
          document_type_name = document_type[document_type_selected]
          break
---
code: |
  custom_file_name = today(format = 'YYYYMMdd') + '-' + format_time(last_access_time(), format='hhmmss') + '-' + document_type_name
---
ga id: |
  code: ga_id_end
event: document_ready_screen
section: Conclusão
progress: 100
back button: False
question: |
  Seu documento foi gerado com sucesso!
subquestion: |
  Nome do documento:

  ${ generated_file.pdf.filename }
action buttons:
  code: |
    button_list
---
code: |
  button_list = list()
  button_list.append(el_button)
---
code: |
  el_button = {'action': educalegal_url + '/document/document/' + doc_uuid,
                'label': 'Ver detalhes',
                'color': 'success',
                'icon': 'check'}
---
code: |
  import json

  # private=False - para que o arquivo fique acessivel fora do docassemble
  generated_file.pdf.set_attributes(private=False)

  # Tipo de documento escolhido pelo usuario
  interview_document_type = document_type_selected

  # dados do documento que serao salvos no educa legal
  data = {
     "name": custom_file_name,
     "description": interview_description,
     "status": "criado",
     "school": school_id,
     "document_type": interview_document_type,
     "parent": None,
     "recipients": json.dumps(recipients),
     "document_data": json.dumps(all_variables())
  }

  log("dados data", "console")
  log(data, "console")

  # external=True - acrescenta na url o protocolo and hostname (https://hostname)
  params = {
      "trigger": "docassemble",
      "pdf_url": generated_file.pdf.url_for(external=True),
      "pdf_filename": custom_file_name + '.pdf',
      "tenant_id": tid,
      "doc_uuid": doc_uuid,
  }
  log("params:", "console")
  log(params, "console")

  # atualiza no educa legal dados do documento gerado
  status_code, el_patch_document = elc.patch_document(data, params)

  log("status_code:", "console")
  log(status_code, "console")

  log("el_patch_document:", "console")
  log(el_patch_document, "console")

  if status_code == 200:
    log("Atualizado o documento")
  else:
    log("Erro ao atualizar o documento")
  log("{doc_uuid} - {data}".format(doc_uuid=doc_uuid, data=el_patch_document))
---
code: |
  recipients = list()
  for item in parts:
      if item.email:
          new_recipient = dict()
          new_recipient['name'] = item.name.text
          new_recipient['email'] = item.email
          new_recipient['group'] = 'signers'
          new_recipient['routingOrder'] = 1
          new_recipient['tabs'] = [
              {
                  'type': 'signHere',
                  'anchorString': generate_anchor('signHere', item.email)
              },
          ]
          recipients.append(new_recipient)

  for item in counterparts:
      if item.email:
          new_recipient = dict()
          new_recipient['name'] = item.name.text
          new_recipient['email'] = item.email
          new_recipient['group'] = 'signers'
          new_recipient['routingOrder'] = 1
          new_recipient['tabs'] = [
              {
                  'type': 'signHere',
                  'anchorString': generate_anchor('signHere', item.email)
              },
          ]
          recipients.append(new_recipient)

  if part_types[0].has_extraparts:
      for item in extraparts:
          if item.email:
              new_recipient = dict()
              new_recipient['name'] = item.name.text
              new_recipient['email'] = item.email
              new_recipient['group'] = 'signers'
              new_recipient['routingOrder'] = 1
              new_recipient['tabs'] = [
                  {
                      'type': 'signHere',
                      'anchorString': generate_anchor('signHere', item.email)
                  },
              ]
              recipients.append(new_recipient)

  if has_witnesses:
      for item in witnesses:
          if item.email:
              new_recipient = dict()
              new_recipient['name'] = item.name.first
              new_recipient['email'] = item.email
              new_recipient['group'] = 'signers'
              new_recipient['routingOrder'] = 2
              new_recipient['tabs'] = [
                  {
                      'type': 'signHere',
                      'anchorString': generate_anchor('signHere', item.email)
                  },
              ]
              recipients.append(new_recipient)
---